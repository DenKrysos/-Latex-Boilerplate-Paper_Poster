
@INPROCEEDINGS{DenKr_denkrement1_indeco,
    KEYWORDS={DenKr_literature,primary_literature},
    TITLE={\begingroup
        {InDeCo -- Detach Communication from the Interconnection via an automatic zero-configuration, service-oriented Network Handling}\endgroup},
    AUTHOR={Krummacker, Dennis and Schotten, Hans Dieter},
    BOOKTITLE={Mobile Communication-Technologies and Applications; 25th ITG-Symposium},
    BOOKTITLE+an:german={ITG Fachbericht, Mobilkommunikation -- Technologien und Anwendungen; 25. ITG-Fachtagung},
    PAGES={12},
    SERIES={ITG},
    YEAR={2021},
    MONTH={11},
    VOLUME={299},
    ORGANIZATION={VDE},
    PUBLISHER={IEEE},
    EVENTTITLE={25. ITG-Fachtagung Mobilkommunikation},
    VENUE={Osnabr{\"u}ck},
    EVENTDATE={2021-11-03/2021-11-04},
    LANGUAGE={English},
    ABSTRACT={\begingroup
        {Industry 4.0 (I4.0), Digitalization, Automation, 5G. These count among the major leading subjects of our time. Unarguably, they afford remarkable room for progression of human society. Behind all these resides the basic idea of increasing the output and decreasing the required human input in terms of an individualâ€™s invested effort. Exactly that idea is also the main goal for this paper. Given the mentioned key topics, all goes down to interacting machines, which means automated communication. But before the state of automated communicating machines, always human effort has to be invested. A network has to be built, this network needs to be configured and not to forget, the communicating applications have to be developed to start with. Nowadays, this always requires a significant amount of expert consideration and manual setting-up, induces rigid environments, restrict compatibility and also bears susceptibility for failure. This is mostly due to the fact that the actual communication itself, that is, peculiarities of the underlying transmission technology must be handled. To eradicate the dependency, an interlayer was developed and implemented, which detaches a communicating entity from the communication itself. This manifests itself in various respects. The resulting work simplifies the process of communication and operation of a physical network for every participating party regardless of the actual roll-out. In addition, already before the phase of deployment and operation, the process of developing an network application is also vastly simplified since from an application nothing is required but announcing its communication intention and sending out messages.}\endgroup}
}


@INPROCEEDINGS{DenKr_MigArb,
    KEYWORDS={DenKr_literature,primary_literature},
    TITLE={\begingroup
        {Status-preserving, Seamless Relocation of Processes in Orchestrated Networks such as Organic 6G}\endgroup},
    AUTHOR={Krummacker, Dennis and Schotten, Hans Dieter},
    BOOKTITLE={2022 IEEE 5th International Conference on Industrial Cyber-Physical Systems (ICPS)},
    YEAR={2022},
    PAGES={8},
    VENUE={Warwick, Coventry, United Kingdom},
    EVENTDATE={2020-05-24/2020-05-26},
    PUBLISHER={IEEE},
    DOI={10.1109/ICPS51978.2022.9816860},
    LANGUAGE={English},
    ABSTRACT={\begingroup
        {Result of this work is a principled mechanism for relocating a running process to another executing device during runtime while preserving its execution state. This covers Re-Deployment of the executable code and seamless Live-Migration best categorized as Parallel Process Migration. The presented mechanism is actually applicable under any circumstances where desired. But the target application environment that was in mind while developing where dynamic and flexible networks that are re-shaping themselves constantly during runtime; especially Organic 6G Infrastructures. The declared goal is to move a process between devices while it is executed and that with at least as possible timing issues caused by the relocation itself, like a temporary unavailability of the service. The ultimate feature is not to have redundancy or any kind of backup execution. Instead, while actively running and producing system, it occurs repeatedly that a permanently running program is required to run on a different physical location than it currently is. Beforehand, it is not known when or where a process is to be relocated to, which depends on runtime circumstances. It happens randomly that the running system, caused by the infrastructure or by utilizing applications, requires a process to move to a different device while having a seamless availability of the service, without outage and preferably equal access timings.}\endgroup}
}